{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","App","useState","coins","updateCoins","fetchCoins","a","setLoading","API","get","input","limit","start","data","console","log","loading","error","useEffect","updateInput","updateInputValues","type","value","className","placeholder","onChange","e","target","onClick","map","x","key","symbol","name","price_usd","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,yLC2F5BC,EAtFH,WAAO,IAAD,EAEaC,mBAAS,IAFtB,mBAETC,EAFS,KAEFC,EAFE,KAIVC,EAAU,uCAAG,4BAAAC,EAAA,sEAEfC,GAAW,GAFI,SAGIC,IAAIC,IAAI,YAAR,uBAAqCC,EAAMC,MAA3C,kBAA0DD,EAAME,QAHpE,OAGTC,EAHS,OAIfT,EAAYS,EAAKV,OACjBW,QAAQC,IAAIC,GAEZT,GAAW,GACXO,QAAQC,IAAIC,GARG,kDAWfF,QAAQG,MAAR,MAXe,0DAAH,qDA0BhBC,qBACE,WACEb,MAEA,IAlCY,MAqCaH,mBAAS,CAAES,MAAO,EAAGC,MAAO,IArCzC,mBAqCTF,EArCS,KAqCFS,EArCE,KAuCVC,EAAoB,SAACC,EAAMC,GAC/BH,EAAY,2BACPT,GADM,kBAENW,EAAOC,MA1CE,EA+CcpB,oBAAS,GA/CvB,mBA+CTc,EA/CS,KA+CAT,EA/CA,KAiDhB,OACE,yBAAKgB,UAAY,OACf,2BACEC,YAAY,gBACZC,SAAW,SAAAC,GAAC,OAAIN,EAAkB,QAASM,EAAEC,OAAOL,UAEtD,2BACEE,YAAY,cACZC,SAAW,SAAAC,GAAC,OAAIN,EAAkB,QAASM,EAAEC,OAAOL,UAEtD,4BACEM,QAASvB,GADX,eAMEW,GAAW,qDAGVA,GACDb,EAAM0B,KAAI,SAAAC,GAAC,OACT,yBACEC,IAAMD,EAAEE,QAER,4BACIF,EAAEG,KADN,MACgBH,EAAEE,QAElB,gCACKF,EAAEI,iBCtECC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICHSC,EAZG,CACd,mBAAsB,YACtB,uBAA0B,CACtB,CACI,KAAQ,YACR,SAAY,+DACZ,OAAU,e,MCAtBC,QAAQC,UAAUC,GAElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLH,QAAQG,MAAMA,EAAMuC,c","file":"static/js/main.6e0ec637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { API } from 'aws-amplify';\r\n\r\nconst App = () => {\r\n\r\n  const [coins, updateCoins] = useState([]);\r\n\r\n  const fetchCoins = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await API.get('cryptoapi', `/coins?limit=${input.limit}&start=${input.start}`);\r\n      updateCoins(data.coins);\r\n      console.log(loading);\r\n      // loading = false;\r\n      setLoading(false);\r\n      console.log(loading);\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n    }\r\n  }  \r\n\r\n  // const fetchCoinsn = () => {\r\n  //   API.get('cryptoapi', `/coins?limit=${input.limit}&start=${input.start}`)\r\n  //   .then(response => {\r\n  //     console.log(response)\r\n  //     updateCoins(response.coins);\r\n  //   })\r\n  //   .catch(err => {\r\n  //     console.log(err)\r\n  //   });\r\n  // }\r\n\r\n  useEffect(\r\n    () => {\r\n      fetchCoins();\r\n    }\r\n    , []\r\n  );\r\n\r\n  const [input, updateInput] = useState({ limit: 5, start: 0 })\r\n\r\n  const updateInputValues = (type, value) => {\r\n    updateInput({ \r\n      ...input\r\n      , [type]: value \r\n    });\r\n  }\r\n\r\n  // let loading = true;\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  return (\r\n    <div className = \"App\">\r\n      <input \r\n        placeholder='Start with...'\r\n        onChange={ e => updateInputValues('start', e.target.value) }\r\n      />\r\n      <input \r\n        placeholder='Limit to...'\r\n        onChange={ e => updateInputValues('limit', e.target.value) }\r\n      />\r\n      <button\r\n        onClick={fetchCoins}\r\n      >\r\n        Fetch Coins\r\n      </button>\r\n\r\n      { loading && <h3>Loading coin data...</h3> }\r\n\r\n      {\r\n        !loading &&\r\n        coins.map(x => (\r\n          <div\r\n            key={ x.symbol }\r\n          >\r\n            <h2>\r\n              { x.name } - {x.symbol}\r\n            </h2>\r\n            <h5>\r\n              ${ x.price_usd }\r\n            </h5>\r\n          </div>\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"cryptoapi\",\n            \"endpoint\": \"https://32smi8exz8.execute-api.us-east-2.amazonaws.com/local\",\n            \"region\": \"us-east-2\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}